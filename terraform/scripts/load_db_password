#!/bin/sh
#
# Retrieve a database password from ansible group_var file
# and set environment-specific environmental variable.
# For production, variable TF_VAR_qa_reports_db_pass_production is set.
# For staging, variable TF_VAR_qa_reports_db_pass_staging= is set.
#
# Considerations:
#   - password should not be written to disk (just set in env)
#   - separate env variables should be used for each environment,
#     to prevent the wrong password being assigned to a database.
#
# Expectations:
#   - The output of this script should be eval()'d
#   - If the script does not exit successfully, eval will make it
#     hard to troubleshoot. In such a case, run manually (without eval).
#   - Script is run from the 'terraform' directory (so that the path to
#     ANSIBLE_PATH resolves).
#
# Usage: ./load_db_password [staging|production] Usage (eval): eval
# $(./load_db_password [staging|production])
#

set -e

ENV=$1
if [ "${ENV}" != "staging" -a "${ENV}" != "production" ]; then
    echo "Usage: $0 [staging|production]"
    exit 1
fi

ANSIBLE_PATH=../ansible
VAULT_PW_FILE=${ANSIBLE_PATH}/vault-passwd
STAGING_GROUP_VARS=${ANSIBLE_PATH}/group_vars/staging
PRODUCTION_GROUP_VARS=${ANSIBLE_PATH}/group_vars/production

check_pass () {
    if [ "${#PASS}" -ne 40 ]; then
        echo "ERROR: password returned is not the right length.";
        exit 1;
    fi
}

if [ "${ENV}" = "staging" ]; then
    PASS=$(ansible-vault --vault-password-file=${VAULT_PW_FILE} view ${STAGING_GROUP_VARS} | grep ^database_password | awk '{print $2}')
    check_pass
    echo export TF_VAR_qa_reports_db_pass_staging=${PASS}
elif [ "${ENV}" = "staging" ]; then
    PASS=$(ansible-vault --vault-password-file=${VAULT_PW_FILE} view ${PRODUCTION_GROUP_VARS} | grep ^database_password | awk '{print $2}')
    check_pass
    echo export TF_VAR_qa_reports_db_pass_production=$(ansible-vault --vault-password-file=${VAULT_PW_FILE} view ${PRODUCTION_GROUP_VARS} | grep ^database_password | awk '{print $2}')
else
    echo "ERROR: Unknown ENV ${ENV}"
    exit 1
fi


