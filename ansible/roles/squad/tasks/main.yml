- name: create virtualenv
  command: virtualenv --python=/usr/bin/python3 {{install_base}}
  args:
    creates: "{{install_base}}/bin/python3"

- name: Install squad
  command: "{{install_base}}/bin/pip install -U squad{{squad_version}} psycopg2"
  register: install_squad
  changed_when: "('up-to-date: squad' not in install_squad.stdout) or
                ('up-to-date: psycopg2' not in install_squad.stdout)"

- name: get python path
  shell: "{{install_base}}/bin/python3 -c 'import sys; print(sys.path[-1])'"
  register: python_path
  changed_when: False

- name: install linaro_ldap_backends
  register: linaro_ldap_backends
  when: linaro_ldap
  template:
    src: roles/squad/templates/linaro_ldap_backends.py
    dest: '{{python_path.stdout}}/linaro_ldap_backends.py'

- name: install Linaro-specific SQUAD plugins
  command: "{{install_base}}/bin/pip install --upgrade --upgrade-strategy=only-if-needed squad-linaro-plugins"
  register: install_squad_linaro_plugins
  changed_when: "'up-to-date: squad-linaro-plugins' not in install_squad_linaro_plugins.stdout"

- name: install Django ldap auth module
  command: "{{install_base}}/bin/pip install --upgrade --upgrade-strategy=only-if-needed django-auth-ldap"
  register: install_django_ldap
  changed_when: "'up-to-date: django-auth-ldap' not in install_django_ldap.stdout"

- user:
    name: squad
    home: "{{install_base}}"
    createhome: no
    shell: /bin/bash

- name: Linaro LDAP settings file
  register: settings
  when: linaro_ldap
  copy:
    src: secrets/linaro_ldap.py
    dest: "{{install_base}}/linaro_ldap.py"
    owner: root
    group: squad
    mode: 0640

- name: environment file
  register: environmentfile
  template:
    src: roles/squad/templates/environment
    dest: '{{install_base}}/environment'

- name: .bashrc
  template:
    src: roles/squad/templates/bashrc
    dest: '{{install_base}}/.bashrc'

- name: .bash_profile
  template:
    src: roles/squad/templates/bash_profile
    dest: '{{install_base}}/.bash_profile'

- name: data directory
  file:
    path: "{{install_base}}/data"
    owner: squad
    group: squad
    mode: 0755
    state: directory

- name: create database user
  shell: sudo -u postgres createuser squad || true
  register: createuser
  changed_when: '"already exists" not in createuser.stderr'

- name: create database
  shell: sudo -u postgres createdb --owner=squad squad || true
  register: createdb
  changed_when: '"already exists" not in createdb.stderr'

- name: systemd service - web
  template:
    src: roles/squad/templates/squad.service
    dest: /etc/systemd/system/squad.service
  notify: reload-systemd
  register: squad_service

- name: systemd service - worker
  template:
    src: roles/squad/templates/squad-worker.service
    dest: /etc/systemd/system/squad-worker.service
  notify: reload-systemd
  register: squad_worker_service

- name: systemd service - scheduler
  template:
    src: roles/squad/templates/squad-scheduler.service
    dest: /etc/systemd/system/squad-scheduler.service
  notify: reload-systemd
  register: squad_scheduler_service

- name: systemd service - listener
  template:
    src: roles/squad/templates/squad-listener.service
    dest: /etc/systemd/system/squad-listener.service
  notify: reload-systemd
  register: squad_listener_service

- meta: flush_handlers

- command: systemctl enable squad.service
  changed_when: False

- command: systemctl enable squad-worker.service
  changed_when: False

- command: systemctl enable squad-scheduler.service
  changed_when: False

- command: systemctl enable squad-listener.service
  changed_when: False

- command: sudo -u squad env -i bash -l -c '{{install_base}}/bin/squad-admin collectstatic --no-input -v 0'
  name: collect static files
  when: install_squad.changed
  changed_when: False

- command: sudo -u squad env -i bash -l -c '{{install_base}}/bin/squad-admin migrate'
  name: migrate database
  when: install_squad.changed
  changed_when: False

- shell: 'if systemctl is-active squad.service; then systemctl reload squad.service; else systemctl restart squad.service; fi'
  name: start/reload squad
  when: squad_service.changed or install_squad.changed or settings.changed or linaro_ldap_backends.changed
  changed_when: False
  notify: reload-apache2

- shell: systemctl restart squad.service
  name: restart squad
  when: environmentfile.changed  or install_squad_linaro_plugins.changed
  changed_when: False
  notify: reload-apache2

- command: systemctl restart squad-worker.service
  name: restart squad-worker
  when: squad_worker_service.changed or install_squad.changed or settings.changed or environmentfile.changed or linaro_ldap_backends.changed or install_squad_linaro_plugins.changed
  changed_when: False

- command: systemctl restart squad-scheduler.service
  name: restart squad-scheduler
  when: squad_scheduler_service.changed or  install_squad.changed or settings.changed or environmentfile.changed or linaro_ldap_backends.changed or install_squad_linaro_plugins.changed
  changed_when: False

- command: systemctl restart squad-listener.service
  name: restart squad-listener
  when: squad_listener_service.changed or install_squad.changed or settings.changed or environmentfile.changed or linaro_ldap_backends.changed or install_squad_linaro_plugins.changed
  changed_when: False

- file:
    path: "{{install_base}}/www"
    owner: root
    group: root
    mode: 0555
    state: directory

- name: apache2 config (no SSL)
  template:
    src: roles/squad/templates/apache2.conf
    dest: /etc/apache2/sites-available/{{inventory_hostname}}.conf
  notify: reload-apache2
  when: "inventory_hostname not in ssl.stdout"

- name: apache2 config (SSL)
  template:
    src: roles/squad/templates/apache2-ssl.conf
    dest: /etc/apache2/sites-available/{{inventory_hostname}}.conf
  notify: reload-apache2
  when: "inventory_hostname in ssl.stdout"

- command: a2ensite {{inventory_hostname}}
  register: result
  changed_when: "'Enabling site' in result.stdout"
  notify: reload-apache2
